// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  password       String
  name           String
  role           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  avatar         String? // optionnel pour l'utilisateur
  tasks          Task[]
  tickets        Ticket[]     @relation("UserTickets")
  messages       Message[]    @relation("Sender")
  notifications  Notification[]
  createdAt      DateTime     @default(now())

  History History[]
}

model Organization {
  id       String  @id @default(uuid())
  name     String
  avatar   String?
  users    User[]
  projects Project[]
  createdAt DateTime @default(now())
}

model Task {
  id             String      @id @default(uuid())
  title          String
  description    String?
  status         TaskStatus  @default(EN_COURS)
  duration       Int?        // dur√©e en minutes
  assignedTo     User?       @relation(fields: [assignedToId], references: [id])
  assignedToId   String?
  project        Project?    @relation(fields: [projectId], references: [id])
  projectId      String?
  createdAt      DateTime    @default(now())
  archived       Boolean     @default(false)
  history        History[]
}

model Project {
  id             String      @id @default(uuid())
  name           String
  description    String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  tasks          Task[]
  createdAt      DateTime     @default(now())
}

model History {
  id        String   @id @default(uuid())
  action    String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  timestamp DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  content   String
  sender    User     @relation("Sender", fields: [senderId], references: [id])
  senderId  String
  ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  ticketId  String?
  createdAt DateTime @default(now())
}

model Ticket {
  id        String   @id @default(uuid())
  subject   String
  content   String
  status    TicketStatus @default(OUVERT)
  sender    User     @relation("UserTickets", fields: [senderId], references: [id])
  senderId  String
  messages  Message[]
  createdAt DateTime @default(now())
}

enum TaskStatus {
  EN_COURS
  EN_ATTENTE
  FAIT
  BLOQUE
  PAS_FAIT
  ABANDONNEE
}

enum TicketStatus {
  OUVERT
  EN_COURS
  RESOLU
  FERME
  EN_ATTENTE
  TRANSFERE
  EN_ATTENTE_CLIENT
  EN_ATTENTE_INTERNE
  EN_ATTENTE_TIERCE_PARTIE
  EN_ATTENTE_AUTRE
  EN_ATTENTE_AUTRE_PARTIE
}
